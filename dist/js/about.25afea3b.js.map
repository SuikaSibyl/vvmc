{"version":3,"file":"js/about.25afea3b.js","mappings":"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","sources":["webpack://vvmc/./src/views/HomeView.vue","webpack://vvmc/./src/views/HomeView.vue?1da1"],"sourcesContent":["<template>\r\n  <div class=\"home\">\r\n    <!-- Show Monte Carlo Estimator -->\r\n    <div ref=\"canvas_mc_estimator\"></div>\r\n    <!-- Show Importance Sampling Estimator -->\r\n    <div ref=\"canvas_is_estimator\"></div>\r\n    <br/>\r\n    <br/>\r\n    <br/>\r\n    <br/>\r\n    <span> This is Importance Sampling estimator. </span>\r\n      <div style=\"width: 550px;\">\r\n        <el-slider v-model=\"sample_speed\" />\r\n      </div>\r\n      <div style=\"width: 550px;\">\r\n        <el-slider v-model=\"alpha_is\" />\r\n      </div>\r\n    <!-- Show Difference Control Variates Estimator -->\r\n    <div ref=\"canvas_dcv_estimator\"></div>\r\n    <span> This is Difference Control Variates estimator. </span>\r\n  </div>\r\n</template>\r\n\r\n<script lang=\"js\">\r\nimport { defineComponent } from 'vue';\r\nimport HelloWorld from '@/components/HelloWorld.vue'; // @ is an alias to /src\r\nimport Two from 'two.js';\r\n// import everything from estimator.ts\r\nimport { EstimationVisualizer } from '@/scripts/estimator.js';\r\nimport { ExampleBeckmann } from '@/scripts/utils.js';\r\n\r\nexport default defineComponent({\r\n  name: 'HomeView',\r\n  components: {\r\n    HelloWorld,\r\n  },\r\n  data() {\r\n    return {\r\n      sample_speed: 0,\r\n      alpha_is: 50,\r\n    };\r\n  },\r\n  // function called when the component is created\r\n  mounted() {\r\n    this.draw_canvas();\r\n  },\r\n  // functions defined\r\n  methods: {\r\n    onResize () {\r\n      \r\n    },\r\n    draw_canvas() {\r\n      // this.draw_canvas_0();\r\n      this.draw_canvas_2();\r\n      // this.draw_canvas_3();\r\n      // this.draw_canvas_4();\r\n      // this.draw_canvas_2();\r\n      // this.draw_canvas_5();\r\n    },\r\n    draw_canvas_0() {\r\n      const params = { width: 600, height: 400, type: Two.Types.canvas };\r\n      const two = new Two(params).appendTo(this.$refs.canvas_mc_estimator);    \r\n      const g = (x) => 1./Math.PI;\r\n      const f = (x) => Math.sin(2 * Math.PI * x) * 0.4 + 0.5;\r\n      const gSample = (N) => {\r\n        // random N samples uniformly from [0, 1]\r\n        const samples = [];\r\n        for (let i = 0; i < N; i++) {\r\n          // const r0 = Math.random();\r\n          // if (r0 < 0.5) {\r\n          //   samples.push(Math.random());\r\n          // } else {\r\n          // }\r\n          samples.push(ExampleBeckmann.sample_g1([Math.random(),Math.random(),Math.random()]));\r\n        }\r\n        return samples;\r\n      }\r\n      const option = {\r\n        two: two,\r\n        f: f,\r\n        g: g,\r\n        numSamples: 10,\r\n        gSample: gSample,\r\n      };\r\n\r\n      const viewer = new EstimationVisualizer(option);\r\n    },\r\n    draw_canvas_1() {\r\n      const params = { width: 800, height: 400, type: Two.Types.canvas };\r\n      const two = new Two(params).appendTo(this.$refs.canvas_is_estimator);    \r\n      const g = (x) => (ExampleBeckmann.g1(x) * (this.alpha_is/100) + 1. * (1 - this.alpha_is/100));\r\n      const f = (x) => {\r\n        const result = ExampleBeckmann.f1(x) / g(x);\r\n        if (isNaN(result)) {\r\n          return 0;\r\n        }\r\n        return result;\r\n      };\r\n      const gSample = (N) => {\r\n        // random N samples uniformly from [0, 1]\r\n        const samples = [];\r\n        for (let i = 0; i < N; i++) {\r\n          const r0 = Math.random();\r\n          if (r0 < this.alpha_is/100) {\r\n            samples.push(ExampleBeckmann.sample_g1([Math.random(),Math.random(),Math.random()]));\r\n          } else {\r\n            samples.push(Math.random());\r\n          }\r\n        }\r\n        return samples;\r\n      };\r\n      const getSpeed = () => { return this.sample_speed; }\r\n      const option = {\r\n        two: two,\r\n        f: f,\r\n        g: g,\r\n        numSamples: 10,\r\n        gSample: gSample,\r\n        speed: getSpeed,\r\n      };\r\n\r\n      const viewer = new EstimationVisualizer(option);\r\n    },\r\n    draw_canvas_2() {\r\n      const params = { width: 800, height: 400, type: Two.Types.canvas };\r\n      const two = new Two(params).appendTo(this.$refs.canvas_is_estimator);    \r\n      const g = (x) => {\r\n        if(this.alpha_is == 50) {\r\n          return 1\r\n        }\r\n        if(this.alpha_is < 50) {\r\n          return ExampleBeckmann.g1(x) * (1 - this.alpha_is/50) + 1. * (this.alpha_is/50)\r\n        } else {\r\n          return ExampleBeckmann.g2(x) * ((this.alpha_is-50)/50) + 1. * (1 - (this.alpha_is-50)/50)\r\n        }\r\n      };\r\n      const f1 = (x) => {\r\n        const result = ExampleBeckmann.f1(x) / g(x);\r\n        if (isNaN(result)) {\r\n          return 0;\r\n        }\r\n        return result;\r\n      };\r\n      const f2 = (x) => {\r\n        const result = ExampleBeckmann.f2(x) / g(x);\r\n        if (isNaN(result)) {\r\n          return 0;\r\n        }\r\n        return result;\r\n      };\r\n      const gSample = (N) => {\r\n        // random N samples uniformly from [0, 1]\r\n        const samples = [];\r\n        for (let i = 0; i < N; i++) {\r\n          const r0 = Math.random();\r\n          if (r0 < this.alpha_is/100) {\r\n            samples.push(ExampleBeckmann.sample_g1([Math.random(),Math.random(),Math.random()]));\r\n          } else {\r\n            samples.push(Math.random());\r\n          }\r\n        }\r\n        return samples;\r\n      };\r\n      const getSpeed = () => { return this.sample_speed; }\r\n      const option = {\r\n        two: two,\r\n        f: f1,\r\n        f2: f2,\r\n        g: g,\r\n        numSamples: 10,\r\n        gSample: gSample,\r\n        speed: getSpeed,\r\n      };\r\n\r\n      const viewer = new EstimationVisualizer(option);\r\n    },\r\n    draw_canvas_3() {\r\n      const params = { width: 800, height: 400, type: Two.Types.canvas };\r\n      const two = new Two(params).appendTo(this.$refs.canvas_is_estimator);    \r\n      const g = (x) => {\r\n        if(this.alpha_is == 50) {\r\n          return 1\r\n        }\r\n        if(this.alpha_is < 50) {\r\n          return ExampleBeckmann.g1(x) * (1 - this.alpha_is/50) + 1. * (this.alpha_is/50)\r\n        } else {\r\n          return ExampleBeckmann.g2(x) * ((this.alpha_is-50)/50) + 1. * (1 - (this.alpha_is-50)/50)\r\n        }\r\n      };\r\n      const f1 = (x) => {\r\n        const result = ExampleBeckmann.f1_noisy(x) / g(x);\r\n        if (isNaN(result)) {\r\n          return 0;\r\n        }\r\n        return result;\r\n      };\r\n      const f2 = (x) => {\r\n        const result = ExampleBeckmann.f1(x) / g(x) / 2;\r\n        if (isNaN(result)) {\r\n          return 0;\r\n        }\r\n        return result;\r\n      };\r\n      const gSample = (N) => {\r\n        // random N samples uniformly from [0, 1]\r\n        const samples = [];\r\n        for (let i = 0; i < N; i++) {\r\n          const r0 = Math.random();\r\n          if (r0 < this.alpha_is/100) {\r\n            samples.push(ExampleBeckmann.sample_g1([Math.random(),Math.random(),Math.random()]));\r\n          } else {\r\n            samples.push(Math.random());\r\n          }\r\n        }\r\n        return samples;\r\n      };\r\n      const getSpeed = () => { return this.sample_speed; }\r\n      const option = {\r\n        two: two,\r\n        f: f1,\r\n        h1: f2,\r\n        g: g,\r\n        numSamples: 10,\r\n        gSample: gSample,\r\n        speed: getSpeed,\r\n      };\r\n\r\n      const viewer = new EstimationVisualizer(option);\r\n    },\r\n    draw_canvas_4() {\r\n      const params = { width: 800, height: 400, type: Two.Types.canvas };\r\n      const two = new Two(params).appendTo(this.$refs.canvas_is_estimator);    \r\n      const g = (x) => {\r\n        if(this.alpha_is == 50) {\r\n          return 1\r\n        }\r\n        if(this.alpha_is < 50) {\r\n          return ExampleBeckmann.g1(x) * (1 - this.alpha_is/50) + 1. * (this.alpha_is/50)\r\n        } else {\r\n          return ExampleBeckmann.g2(x) * ((this.alpha_is-50)/50) + 1. * (1 - (this.alpha_is-50)/50)\r\n        }\r\n      };\r\n      const f1 = (x) => {\r\n        const result = ExampleBeckmann.f1(x) / g(x);\r\n        if (isNaN(result)) {\r\n          return 0;\r\n        }\r\n        return result;\r\n      };\r\n      const f2 = (x) => {\r\n        const result = ExampleBeckmann.f2(x) / g(x);\r\n        if (isNaN(result)) {\r\n          return 0;\r\n        }\r\n        return result;\r\n      };\r\n      const h1 = (x) => {\r\n        const result = ExampleBeckmann.f1(x) / g(x) / 2;\r\n        if (isNaN(result)) {\r\n          return 0;\r\n        }\r\n        return result;\r\n      };\r\n      const h2 = (x) => {\r\n        const result = ExampleBeckmann.f2(x) / g(x) / 2;\r\n        if (isNaN(result)) {\r\n          return 0;\r\n        }\r\n        return result;\r\n      };\r\n      const gSample = (N) => {\r\n        // random N samples uniformly from [0, 1]\r\n        const samples = [];\r\n        for (let i = 0; i < N; i++) {\r\n          const r0 = Math.random();\r\n          if (r0 < this.alpha_is/100) {\r\n            samples.push(ExampleBeckmann.sample_g1([Math.random(),Math.random(),Math.random()]));\r\n          } else {\r\n            samples.push(Math.random());\r\n          }\r\n        }\r\n        return samples;\r\n      };\r\n      const getSpeed = () => { return this.sample_speed; }\r\n      const option = {\r\n        two: two,\r\n        f: f1,\r\n        f2: f2,\r\n        h1: h1,\r\n        h2: h2,\r\n        g: g,\r\n        numSamples: 10,\r\n        gSample: gSample,\r\n        speed: getSpeed,\r\n      };\r\n\r\n      const viewer = new EstimationVisualizer(option);\r\n    },\r\n  },\r\n});\r\n</script>\r\n","import { render } from \"./HomeView.vue?vue&type=template&id=0d4b124d\"\nimport script from \"./HomeView.vue?vue&type=script&lang=js\"\nexport * from \"./HomeView.vue?vue&type=script&lang=js\"\n\nimport exportComponent from \"../../node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__"],"names":["class","ref","style","_createElementBlock","_hoisted_1","_createElementVNode","_hoisted_2","_hoisted_3","_hoisted_4","_createVNode","_component_el_slider","modelValue","_ctx","sample_speed","_cache","$event","_hoisted_5","alpha_is","_hoisted_6","defineComponent","name","components","HelloWorld","data","mounted","this","draw_canvas","methods","onResize","draw_canvas_2","draw_canvas_0","params","width","height","type","Two","Types","canvas","two","appendTo","$refs","canvas_mc_estimator","g","x","Math","PI","f","sin","gSample","N","samples","i","push","ExampleBeckmann","sample_g1","random","option","numSamples","EstimationVisualizer","draw_canvas_1","canvas_is_estimator","g1","result","f1","isNaN","r0","getSpeed","speed","g2","f2","draw_canvas_3","f1_noisy","h1","draw_canvas_4","h2","__exports__","render"],"sourceRoot":""}